{"ast":null,"code":"var _jsxFileName = \"/Users/alya_usual/Documents/ClonedTODO/todo-list/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport TodoElement from \"./components/TodoElement\";\nimport Input from \"./components/Input\";\nimport { SimpleButton } from \"./components/SimpleButton\";\nimport ReadOnlyField from \"./components/ReadOnlyField\";\nimport { Box, ButtonGroup } from \"@mui/material\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  useEffect(() => {\n    getLocalTasks();\n  }, []);\n  useEffect(() => {\n    const filteredHandler = () => {\n      switch (status) {\n        case \"completed\":\n          setFilteredTasks(tasks.filter(task => task.completed === true));\n          break;\n\n        case \"active\":\n          setFilteredTasks(tasks.filter(task => task.completed === false));\n          break;\n\n        default:\n          setFilteredTasks(tasks);\n          break;\n      }\n    };\n\n    const savetoLocalStorage = () => {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      localStorage.setItem(\"button\", status);\n    };\n\n    filteredHandler();\n    savetoLocalStorage();\n  }, [tasks, status]);\n\n  const statusHandler = e => {\n    setStatus(e.target.innerText.toLowerCase());\n  };\n\n  const getLocalTasks = () => {\n    if (localStorage.getItem(\"tasks\") === null && localStorage.getItem(\"button\" === null)) {\n      localStorage.setItem(\"tasks\", []);\n      localStorage.setItem(\"button\", \"\");\n    } else {\n      let itemList = JSON.parse(localStorage.getItem(\"tasks\"));\n      setTasks(itemList);\n      setStatus(localStorage.getItem(\"button\"));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    inputText: inputText,\n    setInputText: setInputText,\n    setTasks: setTasks,\n    tasks: tasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TodoElement, {\n    tasks: tasks,\n    setTasks: setTasks,\n    filteredTasks: filteredTasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    component: \"form\",\n    sx: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      \"& > *\": {\n        m: 1\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReadOnlyField, {\n    filteredTasks: filteredTasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ButtonGroup, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SimpleButton, {\n    text: \"All\",\n    onClick: statusHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SimpleButton, {\n    text: \"Active\",\n    onClick: statusHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SimpleButton, {\n    text: \"Completed\",\n    onClick: statusHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alya_usual/Documents/ClonedTODO/todo-list/src/App.js"],"names":["React","useState","useEffect","TodoElement","Input","SimpleButton","ReadOnlyField","Box","ButtonGroup","App","inputText","setInputText","tasks","setTasks","status","setStatus","filteredTasks","setFilteredTasks","getLocalTasks","filteredHandler","filter","task","completed","savetoLocalStorage","localStorage","setItem","JSON","stringify","statusHandler","e","target","innerText","toLowerCase","getItem","itemList","parse","display","flexDirection","alignItems","m"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,eAAjC;;AACA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,EAAD,CAAlD;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,eAAe,GAAG,MAAM;AAC5B,cAAQL,MAAR;AACE,aAAK,WAAL;AACEG,UAAAA,gBAAgB,CAACL,KAAK,CAACQ,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,IAA1C,CAAD,CAAhB;AACA;;AACF,aAAK,QAAL;AACEL,UAAAA,gBAAgB,CAACL,KAAK,CAACQ,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,KAA1C,CAAD,CAAhB;AACA;;AACF;AACEL,UAAAA,gBAAgB,CAACL,KAAD,CAAhB;AACA;AATJ;AAWD,KAZD;;AAaA,UAAMW,kBAAkB,GAAG,MAAM;AAC/BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAef,KAAf,CAA9B;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BX,MAA/B;AACD,KAHD;;AAIAK,IAAAA,eAAe;AACfI,IAAAA,kBAAkB;AACnB,GApBQ,EAoBN,CAACX,KAAD,EAAQE,MAAR,CApBM,CAAT;;AAwBA,QAAMc,aAAa,GAAIC,CAAD,IAAO;AAC3Bd,IAAAA,SAAS,CAACc,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,WAAnB,EAAD,CAAT;AACD,GAFD;;AAKA,QAAMd,aAAa,GAAG,MAAM;AAC1B,QACEM,YAAY,CAACS,OAAb,CAAqB,OAArB,MAAkC,IAAlC,IACAT,YAAY,CAACS,OAAb,CAAqB,aAAa,IAAlC,CAFF,EAGE;AACAT,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,EAA9B;AACAD,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,EAA/B;AACD,KAND,MAMO;AACL,UAAIS,QAAQ,GAAGR,IAAI,CAACS,KAAL,CAAWX,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAX,CAAf;AACApB,MAAAA,QAAQ,CAACqB,QAAD,CAAR;AACAnB,MAAAA,SAAS,CAACS,YAAY,CAACS,OAAb,CAAqB,QAArB,CAAD,CAAT;AACD;AACF,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAIvB,SAApB;AAA+B,IAAA,YAAY,EAAEC,YAA7C;AAA2D,IAAA,QAAQ,EAAIE,QAAvE;AAAiF,IAAA,KAAK,EAAED,KAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAIA,KAAtB;AAA6B,IAAA,QAAQ,EAAIC,QAAzC;AAAmD,IAAA,aAAa,EAAIG,aAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,GAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,EAAE,EAAE;AACFoB,MAAAA,OAAO,EAAE,MADP;AAEFC,MAAAA,aAAa,EAAE,QAFb;AAGFC,MAAAA,UAAU,EAAE,QAHV;AAIF,eAAS;AACPC,QAAAA,CAAC,EAAE;AADI;AAJP,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE,oBAAC,aAAD;AAAe,IAAA,aAAa,EAAIvB,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAYE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,KAAnB;AAAyB,IAAA,OAAO,EAAEY,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAEA,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,WAAnB;AAA+B,IAAA,OAAO,EAAEA,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAZF,CAHF,CADF;AAwBD;;AACD,eAAenB,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TodoElement from \"./components/TodoElement\";\nimport Input from \"./components/Input\";\nimport { SimpleButton } from \"./components/SimpleButton\";\nimport ReadOnlyField from \"./components/ReadOnlyField\";\n\nimport { Box, ButtonGroup } from \"@mui/material\";\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTasks, setFilteredTasks] = useState([]);\n\n\n\n  useEffect(() => {\n    getLocalTasks();\n  }, []);\n\n  useEffect(() => {\n    const filteredHandler = () => {\n      switch (status) {\n        case \"completed\":\n          setFilteredTasks(tasks.filter((task) => task.completed === true));\n          break;\n        case \"active\":\n          setFilteredTasks(tasks.filter((task) => task.completed === false));\n          break;\n        default:\n          setFilteredTasks(tasks);\n          break;\n      }\n    };\n    const savetoLocalStorage = () => {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      localStorage.setItem(\"button\", status);\n    };\n    filteredHandler();\n    savetoLocalStorage();\n  }, [tasks, status]);\n\n\n\n  const statusHandler = (e) => {\n    setStatus(e.target.innerText.toLowerCase());\n  };\n\n\n  const getLocalTasks = () => {\n    if (\n      localStorage.getItem(\"tasks\") === null &&\n      localStorage.getItem(\"button\" === null)\n    ) {\n      localStorage.setItem(\"tasks\", []);\n      localStorage.setItem(\"button\", \"\");\n    } else {\n      let itemList = JSON.parse(localStorage.getItem(\"tasks\"));\n      setTasks(itemList);\n      setStatus(localStorage.getItem(\"button\"));\n    }\n  };\n\n  return (\n    <div className='container'>\n      <Input inputText = {inputText} setInputText={setInputText} setTasks = {setTasks} tasks={tasks}/>\n      <TodoElement tasks = {tasks} setTasks = {setTasks} filteredTasks = {filteredTasks}/>\n      <Box\n        component='form'\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          \"& > *\": {\n            m: 1,\n          },\n        }}\n      >\n        <ReadOnlyField filteredTasks = {filteredTasks}/>\n        <ButtonGroup color='secondary'>\n          <SimpleButton text='All' onClick={statusHandler} />\n          <SimpleButton text='Active' onClick={statusHandler} />\n          <SimpleButton text='Completed' onClick={statusHandler} />\n        </ButtonGroup>\n      </Box>\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}